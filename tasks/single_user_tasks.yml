---
- block:
  - name: Set user state variable
    set_fact:
      user_state: "{{ 'present' if current_user.state is not defined else current_user.state }}"

  - name: Create user groups
    group:
      name: "{{ item }}"
      state: present
    loop: "{{ current_user.groups }}"
    when: current_user.groups is defined and user_state == 'present'

  - name: Create primary group
    group:
      name: "{{ current_user.group }}"
      state: present
    when: current_user.group is defined and user_state == 'present'

  - name: Ensure sudo group is present
    group:
      name: "{{ sudo_group_name }}"
      state: present
    when: current_user.sudo_user|default(false)

  - name: Install Openssh for ssh-keygen
    package:
      name: "{{ openssh_package }}"
      state: present
    when: current_user.generate_ssh_key|default(false)|bool and user_state == 'present'

  - name: Create user
    user:
      name: "{{ current_user.name  }}"
      append: "{{ current_user.append|default(false)|bool }}"
      comment: "{{ current_user.comment|default(omit) }}"
      create_home: "{{ current_user.create_home|default(true)|bool }}"
      expires: "{{ current_user.expires|default(omit) }}"
      force: "{{ current_user.force|default(omit) }}"
      generate_ssh_key: "{{ current_user.generate_ssh_key|default(false)|bool }}"
      group: "{{ current_user.group|default(omit) }}"
      groups: "{{ current_user.groups|default(omit) }}"
      home: "{{ current_user.home|default(omit) }}"
      move_home: "{{ current_user.move_home|default(false)|bool }}"
      non_unique: "{{ current_user.non_unique|default(false)|bool }}"
      password: "{{ current_user.password|default(omit) }}"
      password_lock: "{{ current_user.password_lock|default(omit) }}"
      remove: "{{ current_user.remove|default(false)|bool }}"
      seuser: "{{ current_user.seuser|default(omit) }}"
      shell: "{{ current_user.shell|default(omit) }}"
      skeleton: "{{ current_user.skeleton|default(omit) }}"
      ssh_key_bits: "{{ current_user.ssh_key_bits|default(omit) }}"
      ssh_key_comment: "{{ current_user.ssh_key_comment|default(omit) }}"
      ssh_key_file: "{{ current_user.ssh_key_file|default(omit) }}"
      ssh_key_passphrase: "{{ current_user.ssh_key_passphrase|default(omit) }}"
      ssh_key_type: "{{ current_user.ssh_key_type|default('rsa') }}"
      state: "{{ user_state }}"
      system: "{{ current_user.system_user|default(false)|bool }}"
      uid: "{{ current_user.uid|default(omit) }}"
      update_password: "{{ current_user.update_password|default('always') }}"

  - name: Add user to sudo/wheel group
    user:
      name: "{{ current_user.name }}"
      groups: "{{ sudo_group_name }}"
      append: yes
    when: current_user.sudo_user|default(false)|bool and user_state == 'present'


  - name: Add ssh key for user
    authorized_key:
      user: "{{ current_user.name }}"
      key: "{{ lookup('file', current_user.authorized_key.key) }}"
      comment: "{{ current_user.authorized_key.comment|default(omit) }}"
      exclusive: "{{ current_user.authorized_key.exclusive|default(false)|bool }}"
      follow: "{{ current_user.authorized_key.follow|default(false)|bool }}"
      key_options: "{{ current_user.authorized_key.key_options|default(omit) }}"
      manage_dir: "{{ false if current_user.path is defined else current_user.authorized_key.manage_dir|default(true)|bool }}"
      path: "{{ current_user.authorized_key.path|default(omit) }}"
      state: "{{ current_user.authorized_key.state|default('present') }}"
      validate_certs: "{{ current_user.authorized_key.validate_certs|default(true)|bool }}"
    when: current_user.authorized_key.key is defined and user_state == 'present'

  - name: Enable passwordless sudo for user
    template:
      src: sudoers_file
      dest: "/etc/sudoers.d/{{ current_user.name }}"
      owner: "root"
      group: "root"
      mode: "0440"
      validate: "/usr/sbin/visudo -cf %s"
    when: current_user.sudo_user|default(false) and current_user.passwordless_sudo|default(false)

  - name: Remove user from passwordless sudo
    file:
      path: "/etc/sudoers.d/{{ current_user.name }}"
      state: absent
    when: user_state == 'absent' or not current_user.passwordless_sudo|default(false)
  when:  current_user.name is defined
